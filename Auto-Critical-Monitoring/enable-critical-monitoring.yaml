AWSTemplateFormatVersion: 2010-09-09
Resources:

# Stopping EC2 Instance resources
  StopEC2Instance:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: StopEC2Instance
      Description: "Stopping an EC2 instance"
      Handler: index.lambda_handler
      Code: 
        S3Bucket: !Join 
          - ''
          - - "remediation-lambdas-"
            - !Ref 'AWS::AccountId'
        S3Key: "ec2-stop.zip"
      Role: !GetAtt LambdaExecutionRoleStopEC2Instance.Arn
      Runtime: python3.8
  
  LambdaExecutionRoleStopEC2Instance:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /service-role/
      ManagedPolicyArns: 
        - !Ref BasicStopEC2InstanceRole

  BasicStopEC2InstanceRole:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy for stopping an ec2 instance
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: logs:CreateLogGroup
            Resource: !Join
              - ''
              - - 'arn:aws:logs:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':*'
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Join
              - ''
              - - 'arn:aws:logs:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':log-group:/aws/lambda/StopEC2Instance:*'
          - Effect: Allow
            Action: ec2:StopInstances
            Resource: "*"

# Blocking EC2 IP Address resources
  EC2BlockIPAddress:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: EC2BlockIPAddress
      Description: "Blocking an EC2 IP address"
      Handler: index.lambda_handler
      Code: 
        S3Bucket: !Join 
          - ''
          - - "remediation-lambdas-"
            - !Ref 'AWS::AccountId'
        S3Key: "ec2-block.zip"
      Role: !GetAtt LambdaExecutionRoleEC2BlockIPAddress.Arn
      Runtime: python3.8

  LambdaExecutionRoleEC2BlockIPAddress:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /service-role/
      ManagedPolicyArns: 
      - !Ref BasicEC2BlockIPAddress

  BasicEC2BlockIPAddress:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy for blocing an ec2 instance iP address
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: logs:CreateLogGroup
            Resource: !Join
              - ''
              - - 'arn:aws:logs:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':*'
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !Join
              - ''
              - - 'arn:aws:logs:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':log-group:/aws/lambda/EC2BlockIPAddress:*'
  
# Guard Duty findings to Slack
  GuardDutyToSlackPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt GuardDutyToSlack.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt GuardDutyToSlackRule.Arn

  GuardDutyToSlack:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GuardDutyToSlack
      Description: "Sending options from guard duty to slack"
      Handler: index.lambda_handler
      Code:
        S3Bucket: !Join 
          - ''
          - - "remediation-lambdas-"
            - !Ref 'AWS::AccountId'
        S3Key: "guarddutytoslack.zip"
      Role: !GetAtt LambdaExecutionRoleGuardDutyToSlack.Arn
      Runtime: python3.6

  GuardDutyToSlackVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref GuardDutyToSlack

  GuardDutyToSlackDestination:
    Type: AWS::Lambda::EventInvokeConfig
    DependsOn: 
      - GuardDutyToSlack
      - GuardDutyToSlackSNS
      - GuardDutyToSlackVersion
    Properties:
      FunctionName: !Ref GuardDutyToSlack
      DestinationConfig:
        OnFailure:
          Destination: !Ref GuardDutyToSlackSNS
        OnSuccess:
          Destination: !Ref GuardDutyToSlackSNS
      MaximumEventAgeInSeconds: 600
      MaximumRetryAttempts: 1
      Qualifier: !GetAtt GuardDutyToSlackVersion.Version
  
  LambdaExecutionRoleGuardDutyToSlack:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /service-role/
      ManagedPolicyArns: 
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      - !Ref BasicGuardDutyToSlackPolicy

  BasicGuardDutyToSlackPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy for sending guard duty msgs to slack
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action: sns:Publish
            Resource: !Ref GuardDutyToSlackSNS
  
  GuardDutyToSlackRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Rule to trigger lambda for guard duty"
      State: ENABLED
      EventPattern: 
        source: 
          - aws.guardduty
        detail: 
          type:
            - UnauthorizedAccess:EC2/RDPBruteForce
      Targets: 
        - Arn: !GetAtt GuardDutyToSlack.Arn
          Id: GuardDutyToSlackRuleTargetId
  
  GuardDutyToSlackSNS:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "GuardDutyToSlackSNS"

  GuardDutyToSlackSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Id: __default_policy_ID
        Statement:
        - Sid: __default_statement_ID
          Effect: Allow
          Principal:
            Service: sns.amazonaws.com
          Action:
          - SNS:GetTopicAttributes
          - SNS:SetTopicAttributes
          - SNS:AddPermission
          - SNS:RemovePermission
          - SNS:DeleteTopic
          - SNS:Subscribe
          - SNS:ListSubscriptionsByTopic
          - SNS:Publish
          - SNS:Receive
          Resource: !Ref GuardDutyToSlackSNS
          Condition: 
            StringEquals:
              AWS:SourceOwner: !Ref 'AWS::AccountId'
      Topics: 
      - !Ref GuardDutyToSlackSNS

  GuardDutyToSlackSNSSubscriptions:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref GuardDutyToSlackSNS
      Endpoint: "https://global.sns-api.chatbot.amazonaws.com"
      Protocol: "https"
      RawMessageDelivery: 'false'
      DeliveryPolicy:
        healthyRetryPolicy:
          minDelayTarget: 20
          maxDelayTarget: 20
          numRetries: 3
          numMaxDelayRetries: 0
          numNoDelayRetries: 0
          numMinDelayRetries: 0
          backoffFunction: linear

# Chatbot in Slack
  GuardDutyToSlackChatBot:
    Type: AWS::Chatbot::SlackChannelConfiguration
    Properties: 
      ConfigurationName: GuardDutyToSlackChatBot
      IamRoleArn: !GetAtt GuardDutyToSlackChatBotExecutionRole.Arn
      SlackChannelId: {{INSERT_SLACK_CHANNEL_ID}}
      SlackWorkspaceId: {{INSERT_SLACK_WORKSPACE_ID}}
      SnsTopicArns: 
        - !Ref GuardDutyToSlackSNS

  GuardDutyToSlackChatBotExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - chatbot.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /service-role/
      ManagedPolicyArns: 
      - !Ref ChatBotNotificationsPolicy
      - !Ref ChatBotLambdaPolicy

  ChatBotNotificationsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy for chatbot in Slack
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - cloudwatch:Describe*
          - cloudwatch:Get*
          - cloudwatch:List*
          Effect: Allow
          Resource: "*"
  
  ChatBotLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy for chatbot in Slack
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - lambda:invokeAsync
          - lambda:invokeFunction
          Resource:
          - "*"

