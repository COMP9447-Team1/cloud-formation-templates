AWSTemplateFormatVersion: "2010-09-09"
Resources:

  StopEC2Instance:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Stopping an EC2 instance"
      Handler: "index.lambda_handler"
      Code: 
        S3Bucket: !Join 
          - "remediation-lambdas-"
          - !Ref 'AWS::AccountId'
        S3Key: "{{INSERT_ZIPFILE_NAME}}"
      Role:
        Fn::GetAtt: 
          - LambdaExecutionRoleStopEC2Instance
          - Arn
      Runtime: "python3.8"
  
  LambdaExecutionRoleStopEC2Instance:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /service-role/
      ManagedPolicyArns: 
        - !Ref BasicStopEC2InstanceRole
        - !Ref InlineStopEC2InstanceRole

  BasicStopEC2InstanceRole:
    Type: 'AWS::IAM::ManagedPolicy'
      Properties:
        Description: Managed policy for stopping an ec2 instance
        Path: /
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: logs:CreateLogGroup
              Resource: !Join
                = ''
                - 'arn:aws:logs:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':*'
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Join
                = ''
                - 'arn:aws:logs:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':log-group:/aws/lambda/StopEC2Instance:*'

  InlineStopEC2InstanceRole:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action: ec2:StopInstances
            Resource: "*"

  EC2BlockIPAddress:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Blocking an EC2 IP address"
      Handler: "index.lambda_handler"
      Code: 
        S3Bucket: !Join 
          - "remediation-lambdas-"
          - !Ref 'AWS::AccountId'
        S3Key: "{{INSERT_ZIPFILE_NAME}}"
      Role:
        Fn::GetAtt: 
          - LambdaExecutionRoleEC2BlockIPAddress
          - Arn
      Runtime: "python3.8"

  LambdaExecutionRoleEC2BlockIPAddress:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /service-role/
      ManagedPolicyArns: 
      - !Ref BasicEC2BlockIPAddress

  BasicEC2BlockIPAddress:
    Type: 'AWS::IAM::ManagedPolicy'
      Properties:
        Description: Managed policy for blocing an ec2 instance iP address
        Path: /
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: logs:CreateLogGroup
              Resource: !Join
                - ''
                - 'arn:aws:logs:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':*'
            - Effect: Allow
              Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: !Join
                - ''
                - 'arn:aws:logs:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':log-group:/aws/lambda/EC2BlockIPAddress:*'

  GuardDutyToSlack:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Sending options from guard duty to slack"
      Handler: "index.lambda_handler"
      Code:
        S3Bucket: !Join 
          - "remediation-lambdas-"
          - !Ref 'AWS::AccountId'
        S3Key: "{{INSERT_ZIPFILE_NAME}}"
      Role:
        Fn::GetAtt: 
          - LambdaExecutionRoleGuardDutyToSlack
          - Arn
      Runtime: "python3.6"

  GuardDutyToSlackVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref GuardDutyToSlack

  GuardDutyToSlackDestination:
    Type: "AWS::Lambda::EventInvokeConfig"
    Properties:
      DestinationConfig:
        OnFailure:
          Destination: !Join
            - ''
            - 'arn:aws:sns:'
            - !Ref 'AWS::Region'
            - ':'
            - !Ref 'AWS::AccountId'
            - ':GuardDuty_to_Slack'
        OnSuccess:
          Destination: !Join
            - ''
            - 'arn:aws:sns:'
            - !Ref 'AWS::Region'
            - ':'
            - !Ref 'AWS::AccountId'
            - ':GuardDuty_to_Slack'
      FunctionName: !Ref GuardDutyToSlack
      Qualifier: !GetAtt GuardDutyToSlackVersion.Version
  
  LambdaExecutionRoleGuardDutyToSlack:
    Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /service-role/
        ManagedPolicyArns: 
        - !Ref AWSLambdaBasicExecutionRole
        - !Ref BasicGuardDutyToSlackPolicy

  BasicGuardDutyToSlackPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
      Properties:
        Description: Managed policy for sending guard duty msgs to slack
        Path: /
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action: sns:Publish
              Resource: !Join
                - ''
                - 'arn:aws:sns:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':GuardDutyToSlack'
            - Sid: VisualEditor1
              Effect: Allow
              Action:  iam:GetUser
              Resource: "*"
    
  GuardDutyToSlackPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - GuardDutyToSlack
            - Arn
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
  
  GuardDutyToSlackRule: 
  Type: AWS::Events::Rule
  Properties: 
    Description: "Rule to trigger lambda for guard duty"
    State: "ENABLED"
    EventPattern: 
      source: 
        - "aws.guardduty"
      detail-type: 
          - "UnauthorizedAccess:EC2/RDPBruteForce"
    Targets: 
      - 
        Arn: 
          Fn::GetAtt: 
            - "GuardDutyToSlack"
            - "Arn"



      

