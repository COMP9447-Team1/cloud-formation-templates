AWSTemplateFormatVersion: 2010-09-09
Resources:
  S3BucketEncryptedCheckPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - S3BucketEncryptedCheck
            - Arn
        Action: lambda:InvokeFunction
        Principal: config.amazonaws.com
  S3BucketEncryptedCheck:
    Type: 'AWS::Lambda::Function'
    Description: "Cloud formation template to enable automatic s3 bucket encryption across your account"
    Properties:
      Code:
        ZipFile: !Sub >
          import json
          import boto3
          import urllib3 

          http = urllib3.PoolManager() # not sure not why inside of def - is it
          executed only once?

          client = boto3.client('s3')

          def lambda_handler(event, context):
              print("event", event)
              print("context", context)

              invokingEvent = json.loads(event["invokingEvent"])
              bucketOwner = invokingEvent['configurationItem']['awsAccountId']
              bucketName = invokingEvent['configurationItem']['resourceName']

              try:
                  response = client.get_bucket_encryption(
                      Bucket=bucketName,
                      ExpectedBucketOwner=bucketOwner
                  )
              except Exception as e:
                  if ('ServerSideEncryptionConfigurationNotFoundError' in str(e)):
                      print("enabling encryption")
                      result = 'Server Side Encryption is now SUCCESSFULLY enabled for S3 Bucket ' + bucketName
                      
                      response = client.put_bucket_encryption(
                          Bucket=bucketName,
                          ServerSideEncryptionConfiguration={
                              'Rules': [
                                  {
                                      'ApplyServerSideEncryptionByDefault': {
                                          'SSEAlgorithm': 'AES256'
                                      },
                                      'BucketKeyEnabled': True
                                  },
                              ]
                          },
                          ExpectedBucketOwner=bucketOwner
                      )
                      
                      # === Slack Notifications part ====
                      try: #  try logic to catch errors
                          # URL var is basically the Bot's private key
                          url = {{INSERT_SLACK_WEBHOOK_HERE}}
                          
                          # my own var
                          md_text = "*"+( event.get('detail-type', "Config Rule") + "*\n\n" + result + "\n")
                          
                          msg = {
                              "channel": "#team1",
                              "username": "WEBHOOK_USERNAME",
                              "text": md_text,
                              "icon_emoji": ":white_check_mark:"
                          }
                          
                          encoded_msg = json.dumps(msg).encode('utf-8')
                          resp = http.request('POST',url, body=encoded_msg)
                          print({
                              "message": md_text, 
                              "status_code": resp.status, 
                              "response": resp.data
                          })
                      except Exception as e:
                          print(e)
                          raise
                      # ==== Slack END ===

              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Role:
        Fn::GetAtt: 
          - LambdaExecutionRole
          - Arn
  S3BucketEncryptedCheckConfigRule:
    Type: 'AWS::Config::ConfigRule'
    Properties:
      ConfigRuleName: S3BucketEncryptedCheckConfigRule
      Scope:
        ComplianceResourceTypes:
          - 'AWS::S3::Bucket'
      Source:
        Owner: CUSTOM_LAMBDA
        SourceDetails:
          - 
            EventSource: aws.config
            MessageType: ConfigurationItemChangeNotification
        SourceIdentifier:
          Fn::GetAtt: 
            - S3BucketEncryptedCheck
            - Arn
    DependsOn: S3BucketEncryptedCheckPermission
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - config.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "VisualEditor0"
                Effect: "Allow"
                Action: logs:CreateLogGroup
                Resource: "*"
              - Sid: "VisualEditor1"
                Effect: "Allow"
                Action: 
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:log-group:/aws/lambda/S3BucketEncryptedCheck:*"
              - Sid: "VisualEditor2"
                Effect: "Allow"
                Action: 
                - s3:PutEncryptionConfiguration
                - s3:GetEncryptionConfiguration
                Resource: "*"

      