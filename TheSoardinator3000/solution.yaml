AWSTemplateFormatVersion: 2010-09-09

Resources:
  S3BucketRemediationCFNs:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: Private
      BucketName: !Join
        - ""
        - - "remediation-cfns-"
          - !Ref "AWS::AccountId"

  S3BucketRemediationLambdas:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: Private
      BucketName: !Join
        - ""
        - - "remediation-lambdas-"
          - !Ref "AWS::AccountId"

  CreateStackLambdaPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - CreateStackLambda
          - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:aws:execute-api:"
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref RemediationAPI
          - "/*"

  RemoveStackLambdaPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - RemoveStackLambda
          - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:aws:execute-api:"
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref RemediationAPI
          - "/*"

  CreateStackLambda:
    Type: "AWS::Lambda::Function"
    Description: "Cloud formation template to create stacks on request"
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          client = boto3.client('cloudformation')

          def lambda_handler(event, context):
              lambda_client = boto3.client('lambda')
              role_response = (lambda_client.get_function_configuration(
                  FunctionName = os.environ['AWS_LAMBDA_FUNCTION_NAME'])
              )
              print(role_response)
              roleArn = role_response['Role']
              accountId = context.invoked_function_arn.split(":")[4]
              commandType = event['id']
              capabilities = ['CAPABILITY_IAM']
              stackName = commandType
              print(commandType)
              templateUrl = f"https://remediation-cfns-{accountId}.s3.amazonaws.com/{commandType}.yaml"
              print(templateUrl)
              print(event)
              print(context)

              response = client.create_stack(
                  StackName=stackName,
                  TemplateURL=templateUrl,
                  Capabilities=capabilities,
                  RoleARN=roleArn,
              )

              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }
      Handler: index.lambda_handler
      Runtime: python3.8
      Role:
        Fn::GetAtt:
          - LambdaExecutionRoleCreateStack
          - Arn

  RemoveStackLambda:
    Type: "AWS::Lambda::Function"
    Description: "Cloud formation template to remove stacks on request"
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          client = boto3.client('cloudformation')

          def lambda_handler(event, context):
              # TODO implement
              stackName = event["id"]
              print(stackName)
              capabilities = ['CAPABILITY_IAM']
              lambda_client = boto3.client('lambda')
              role_response = (lambda_client.get_function_configuration(
                  FunctionName = os.environ['AWS_LAMBDA_FUNCTION_NAME'])
              )
              print(role_response)
              roleArn = role_response['Role']
              resourceTypes = ['AWS::*']
              
              response = client.delete_stack(
                  StackName=stackName,
                  RoleARN=roleArn
              )
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }
      Handler: index.lambda_handler
      Runtime: python3.8
      Role:
        Fn::GetAtt:
          - LambdaExecutionRoleRemoveStack
          - Arn

  LambdaExecutionRoleCreateStack:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - cloudformation.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /service-role/
      ManagedPolicyArns:
        - !Ref LambdaExecutionRoleCreateStackPolicy

  LambdaExecutionRoleRemoveStack:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - cloudformation.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /service-role/
      ManagedPolicyArns:
        - !Ref LambdaExecutionRoleRemoveStackPolicy

  LambdaExecutionRoleCreateStackPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: Policy for CreateStack lambda function
      Path: /
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action: logs:CreateLogGroup
            Resource: !Join
              - ""
              - - "arn:aws:logs:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":*"
          - Sid: VisualEditor1
            Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Join
              - ""
              - - "arn:aws:logs:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":log-group:/aws/lambda/CreateStack:*"
          - Sid: VisualEditor2
            Effect: Allow
            Action:
              - iam:CreatePolicy
              - iam:*
              - s3:GetObject
              - iam:PassRole
              - cloudformation:CreateStack
              - lambda:*
              - config:*
            Resource: "*"

  LambdaExecutionRoleRemoveStackPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: Policy for CreateStack lambda function
      Path: /
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - iam:GetPolicy
              - iam:DeletePolicy
              - iam:DeleteRole
              - lambda:GetFunctionConfiguration
              - iam:PassRole
              - iam:DetachRolePolicy
              - iam:ListPolicyVersions
              - cloudformation:DeleteStack
              - config:DescribeConfigRules
              - lambda:DeleteFunction
              - config:DeleteConfigRule
              - lambda:RemovePermission
              - iam:DeletePolicyVersion"
            Resource: "*"

  RemediationAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "Remediation Api"
      Description: "Api for managing remediations"
      FailOnWarnings: true

  ProdApiStage:
    DependsOn: ApiGateWayAccount
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"
      RestApiId: !Ref RemediationAPI
      StageName: Production

  ApiGateWayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogsRole.Arn

  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: "*"

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - AddMethod
      - DeleteMethod
    Properties:
      RestApiId: !Ref RemediationAPI
      StageName: Prod

  DeleteResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RemediationAPI
      ParentId: !GetAtt RemediationAPI.RootResourceId
      PathPart: delete

  AddResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RemediationAPI
      ParentId: !GetAtt RemediationAPI.RootResourceId
      PathPart: add

  AddMethod:
    DependsOn: CreateStackLambdaPermissions
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join
          - ""
          - - "arn:aws:apigateway:"
            - !Ref AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt CreateStackLambda.Arn
            - "/invocations"
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref AddResource
      RestApiId: !Ref RemediationAPI
      MethodResponses:
        - StatusCode: 200

  DeleteMethod:
    DependsOn: RemoveStackLambdaPermissions
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join
          - ""
          - - "arn:aws:apigateway:"
            - !Ref AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt RemoveStackLambda.Arn
            - "/invocations"
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref DeleteResource
      RestApiId: !Ref RemediationAPI
      MethodResponses:
        - StatusCode: 200
